#!/usr/bin/env python3

import argparse
import pathlib
import os
from collections import Counter
import sys

def get_args():
    parser = argparse.ArgumentParser(description="""
            The purpose of this script is to adjust a BED file that was
            generated by mapping Illumina RNAseq data to a reference fasta. This
            script 'elongates' each transcript such that it starts at the
            begining of the reference and ends at the end of the reference. When
            doing this adjustment, the location of the splice junction(s)
            relative to the reference are kept the same, but the first and last
            exon blocks are increased in size to go to each end of the reference.

            The adjustment is as follows:
            - start_dif is calculated as tx_start - 0 (ref_start) = tx_start
            - end_dif is calculated as genome_length - tx_end
            - To the first block: Add the start_dif to the size.
            - To all subequent blocks: Add the start_dif to the start.
            - To the last block: Add the end_dif to the size.
            """)

    # Required arguments
    parser.add_argument(
        '-i',
        '--in_bed',
        type=str,
        required=True,
        help='''
        Path to the BED file. This file should be generated in the following
        way:
        - Map RNAseq reads (illumina) against the viral
        transcriptome using minimap2.
            - Generally good idea to not report secondary alignments, else
              they will end up in the bed file.
        - Convert the bam file to BED using bedtools.
        '''
    )
    parser.add_argument(
        '-o',
        '--out_bed',
        type=str,
        required=True,
        help='''
        Path to the output BED file that contains reads that have all been
        elongated.
        '''
    )
    parser.add_argument(
        '-r',
        '--reference_length',
        type=int,
        required=True,
        help='''
        Length of ENTIRE REFERENCE. SV40 length is 5243bp. If using single SV40
        reference would enter 5243, if using doubled reference would enter
        10486, etc.
        '''
    )
    args = parser.parse_args()

    return args


def main():

    # Sort out the arguments
    #--------------------------------------------------------------------#
    args = get_args()
    in_bed = args.in_bed
    out_bed = args.out_bed
    reference_length = args.reference_length

    # Main
    #--------------------------------------------------------------------#
    print("{}: Starting script".format(sys.argv[0]))

    # Make sure output file dir is made if neccesary
    out_dir = os.path.dirname(out_bed)
    pathlib.Path(out_dir).mkdir(parents=True, exist_ok=True)

    # Parse each line from bed and slide if necessary
    with open(in_bed) as in_bed_handle:

        with open(out_bed, "w") as out_bed_handle:

            for line in in_bed_handle:

                # Parse bed entries
                entry = line.rstrip("\n").split("\t")
                tx_start = int(entry[1])
                tx_end = int(entry[2])
                n_blocks = int(entry[9])
                blockSizes = entry[10].rstrip(",").split(",")
                blockStarts = entry[11].rstrip(",").split(",")

                # Calculate start_dif and end_dif
                start_dif = tx_start
                end_dif = reference_length - tx_end

                # Iterate over each block
                for i in range(n_blocks):

                    # First block
                    if i == 0:
                        blockSizes[i] = int(blockSizes[i]) + start_dif

                    # Subsequent blocks
                    if i > 0:
                        blockStarts[i] = int(blockStarts[i]) + start_dif

                    # Final block
                    if i == n_blocks - 1:
                        blockSizes[i] = int(blockSizes[i]) + end_dif

                # Go back and make blockSizes and blockStarts into strings
                blockSizes = [str(n) for n in blockSizes]
                blockStarts = [str(n) for n in blockStarts]

                # Re-assign tx_start/tx_end and thickStart/thickEnd
                entry[1] = str(0)
                entry[2] = str(reference_length)
                entry[6] = str(0)
                entry[7] = str(reference_length)

                # Condense and re-assign blockSizes and blockStarts
                entry[10] = ",".join(blockSizes)
                entry[11] = ",".join(blockStarts)

                # Write it out
                entry = "\t".join(entry) + "\n"
                out_bed_handle.write(entry)

    print("{}: Finished".format(sys.argv[0]))

if __name__ == '__main__':
    main()
