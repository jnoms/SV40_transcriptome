//============================================================================//
// Define params
//============================================================================//

// Global input
//============================================================================//
params.out_dir = 'output'

// Inputs
params.in_fastq = "input/*fastq.gz"
params.in_fastq_type = "Illumina" // options: "Illumina" or "Nanopore"
params.reference_genome_fasta = "$baseDir/resources/ref/SV40/SV40_100_DOUBLED.fasta"
params.genome_length = 5243 // length of a *single* reference genome
params.reference_length = 10486 // length of entire reference sequence

// Global settings
params.aligner = "Minimap2" // options: "Minimap2" or "STAR"

// Alignment settings
params.only_primary_alignments = "yes" // options: "yes" or "no"
params.STAR_reference_index = "$baseDir/resources/ref/SV40/STAR_SV40_100_DOUBLED"


// Sliding bed/bam
params.slide_bed_only_keep_wraparound = "no" // options: "yes" or "no"

// Elongation - ILLUMINA SPECIFIC
params.illumina_bed_elongate_only_keep_spliced_reads = "yes"

// Filtering prodigal file for spliced ORFs
params.filter_prodigal_allowable_strands = "+"

// Diamond ORF alignment
params.diamond_database = "$baseDir/resources/ref/SV40/SV40_canonical_pr.dmnd"
params.diamond_outfmt = "6 qseqid qlen sseqid evalue bitscore pident length qstart qend sstart send"
params.diamond_temp_dir = "temp"
params.diamond_evalue = "10"
params.diamond_max_alignments = "0" // 0 - all alignments
params.diamond_include_unaligned = "TRUE" // options TRUE or FALSE


//============================================================================//
// Process
//============================================================================//
profiles {

  o2_slurm {
      process {

            // Global setting
            executor = 'slurm'
            queue = { task.time < 12.h ? "short" : "medium" }
            cache = 'lenient'
            conda = "$baseDir/resources/conda/LIST_LINUX_CONDA_HERE.yml"
            beforeScript = "module load gcc conda2"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3

            // resources
            withName: virORFinder {
              time = { 10.m * task.attempt }
              memory = { 5.GB * task.attempt }
              cpus = 1
            }

            withName: diamond_all_by_all {
              time = { pr_fasta.size() < 5.MB ?
                        20.m * task.attempt :
                       pr_fasta.size() < 15.MB ?
                        40.m * task.attempt :
                       pr_fasta.size() < 100.MB ?
                        5.h * task.attempt :
                        10.h * task.attempt
                     }
              memory = { pr_fasta.size() < 15.MB ?
                          10.GB * task.attempt :
                          60.GB * task.attempt
                     }
              cpus = { pr_fasta.size() < 5.MB ?
                        4 * task.attempt :
                       pr_fasta.size() < 15.MB ?
                        6 * task.attempt :
                        10 * task.attempt
                     }
            }

            withName: virORF_report {
              time = { diamond_file.size() < 2.GB ?
                        15.m * task.attempt :
                      diamond_file.size() < 10.GB ?
                        30.m * task.attempt :
                      diamond_file.size() < 30.GB ?
                        1.h * task.attempt :
                        3.h * task.attempt
                     }
              memory = { diamond_file.size() < 2.GB ?
                          3.GB * task.attempt :
                         diamond_file.size() < 10.GB ?
                          20.GB * task.attempt :
                         diamond_file.size() < 30.GB ?
                          50.GB * task.attempt :
                          100.GB * task.attempt
                       }
                cpus = 1
            }

            withName: virORF_filter_fasta {
              time = { 15.m * task.attempt }
              memory = { 3.GB * task.attempt }
              cpus = 1
            }

      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
      }

      conda {
            cacheDir = "/n/data2/dfci/medonc/decaprio/jason/nf_conda_envs"
      }

  } // this closes the o2_slurm profile

  o2_local {
      process {
            // Global setting
            executor = 'local'
            cache = 'lenient'
            conda = "$baseDir/resources/conda/LIST_LINUX_CONDA_HERE.yml"
            beforeScript = "module load gcc conda2"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3
      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
      }

      conda {
            cacheDir = "/n/data2/dfci/medonc/decaprio/jason/nf_conda_envs"
      }

  } // this closes the o2_local profile


  mac {
      process {
            // Global setting
            executor = 'local'
            cache = 'lenient'
            conda = "$baseDir/resources/conda/conda_mac.yml"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3
      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
            }

      conda {
            cacheDir = "/Users/jnom/Documents/Research/DeCaprio_Meyerson/code/conda_envs"
            }
  } // this closes the mac profile

} // this closes the entire profiles thing
