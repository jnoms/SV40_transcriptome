//============================================================================//
// Define params
//============================================================================//

// Global input
//============================================================================//
params.out_dir = 'output'

// Inputs
params.in_fastq = "input/*fastq.gz"
params.in_fastq_type = "Illumina" // options: "Illumina" or "Nanopore"

// Global settings
params.aligner = "Minimap2" // options: "Minimap2" or "STAR"

// Alignment settings
params.only_primary_alignments = "yes" // options: "yes" or "no"

// Sliding bed/bam
params.slide_bed_only_keep_wraparound = "no" // options: "yes" or "no"

// Generation of bed spans
params.bed_to_span_junc_reads_only_ILLUMINA = "yes"
params.bed_to_span_junc_reads_only_NANOPORE = "no"

// Elongation - ILLUMINA SPECIFIC
params.illumina_bed_elongate_only_keep_spliced_reads = "yes"

// Filtering prodigal file for spliced ORFs
params.filter_prodigal_allowable_strands = "+"

// Diamond ORF alignment
params.diamond_outfmt = "6 qseqid sseqid evalue bitscore pident length qlen slen qstart qend sstart send"
params.diamond_temp_dir = "temp"
params.diamond_evalue = "10"
params.diamond_max_alignments = "0" // 0 - all alignments
params.diamond_include_unaligned = "TRUE" // options TRUE or FALSE


// VIRUS-SPECIFIC OPTIONS - USE A CONFIG
// ------------------------------------------------ //
// params.reference_genome_fasta = ""
// params.genome_length = 0 // length of a *single* reference genome
// params.reference_length = 0 // length of entire reference sequence
// params.diamond_database = "$baseDir/resources/ref/SV40/SV40_canonical_pr.dmnd"
// params.STAR_reference_index = ""


// process_illumina.nf parameters
//============================================================================//
params.index = 'index.csv' //columns: sample_name, read1, read2. Header requiired.
params.trim_galore_run_fastqc = "T" // Runs fastqc, unless anything except "T" is specified
params.trim_galore_minlength = 40

//============================================================================//
// Process
//============================================================================//
profiles {

  o2_slurm {
      process {

            // Global setting
            executor = 'slurm'
            queue = { task.time < 12.h ? "short" : "medium" }
            cache = 'lenient'
            conda = "$baseDir/resources/conda/conda_linux.yml"
            beforeScript = "module load gcc conda2"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3

            // resources
            withName: Minimap2 {
              time = { 1.h * task.attempt }
              memory = { 30.GB * task.attempt }
              cpus = { 5 * task.attempt }
            }

            withName: STAR {
              time = { 6.h * task.attempt }
              memory = { 50.GB * task.attempt }
              cpus = 10
            }

            withName: slide_bed {
              time = { 1.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = 1
            }

            withName: bed_to_span {
              time = { 1.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = 1
            }

            withName: bed_elongate_illumina_reads {
              time = { 1.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = 1
            }

            withName: prodigal {
              time = { 1.h * task.attempt }
              memory = { 20.GB * task.attempt }
              cpus = { 4 * task.attempt }
            }

            withName: filter_prodigal {
              time = { 1.h * task.attempt }
              memory = { 20.GB * task.attempt }
              cpus = 1
            }

            withName: prodigal_to_orfs_direct {
              time = { 1.h * task.attempt }
              memory = { 20.GB * task.attempt }
              cpus = { 1 * task.attempt }
            }

            withName: diamond {
              time = { 1.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = { 4 * task.attempt }
            }

            withName: bed_extract_representatives {
              time = { 1.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = 1
            }

            withName: characterize_ORFs {
              time = { 1.h * task.attempt }
              memory = { 20.GB * task.attempt }
              cpus = 1
            }

            // Workflow parameters for process_illumina.nf
            withName: trim_galore {
              time = { 4.h * task.attempt }
              memory = { 10.GB * task.attempt }
              cpus = 1
            }

      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
      }

      conda {
            cacheDir = "/n/data2/dfci/medonc/decaprio/jason/nf_conda_envs"
      }

  } // this closes the o2_slurm profile

  o2_local {
      process {
            // Global setting
            executor = 'local'
            cache = 'lenient'
            conda = "$baseDir/resources/conda/conda_linux.yml"
            beforeScript = "module load gcc conda2"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3
      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
      }

      conda {
            cacheDir = "/n/data2/dfci/medonc/decaprio/jason/nf_conda_envs"
      }

  } // this closes the o2_local profile


  mac {
      process {
            // Global setting
            executor = 'local'
            cache = 'lenient'
            conda = "$baseDir/resources/conda/conda_mac.yml"

            // Error handling
            errorStrategy = 'retry'
            maxRetries = 3
      }

      //============================================================================//
      // Misc settings
      //============================================================================//

      executor {
            // Let nextflow submit up to this many jobs in parallel at one time
            queueSize = 5000
      }

      report {
            enabled = true
            file = "$params.out_dir/nf_information/pipeline_report.html"
      }

      timeline {
            enabled = true
            file = "$params.out_dir/nf_information/timeline.html"
          }

      trace {
            enabled = true
            file = "$params.out_dir/nf_information/trace.tsv"
            }

      conda {
            cacheDir = "/Users/jnom/Documents/Research/DeCaprio_Meyerson/code/conda_envs"
            }
  } // this closes the mac profile

} // this closes the entire profiles thing
